
from collections import deque
class Solution(object):
	def updateBoard(self, board, click):
		"""
		:type board: List[List[str]]
		:type click: List[int]
		:rtype: List[List[str]]
		"""
		r, c = click 
		if board[r][c] == 'M':
			board[r][c] = 'X'
			return board

		ROWS = len(board)
		COLS = len(board[0])

		Q = deque()
		Q.append((r, c))
		visited = set( [(r, c)] )
		while Q:
			r, c = Q.popleft()
			# review r, c

			numBombs = 0
			adjEmpty = []
			for dr, dc in ( (-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1) ):
				nr, nc = r + dr, c + dc
				if nr < 0 or nr >= ROWS: continue 
				if nc < 0 or nc >= COLS: continue
				if board[nr][nc] == 'E':
					if (nr, nc) not in visited:
						adjEmpty.append( (nr, nc) )
				elif board[nr][nc] == 'M':
					numBombs += 1

			board[r][c] = 'B' if numBombs == 0 else str(numBombs)
			if numBombs == 0:
				for _ in adjEmpty: 
					Q.append(_)
					visited.add(_)


		return board 

for x in Solution().updateBoard(
map(list
,[29,2]
): print x
print 

for x in Solution().updateBoard(
[['E', 'E', 'E', 'E', 'E'],
 ['E', 'E', 'M', 'E', 'E'],
 ['E', 'E', 'E', 'E', 'E'],
 ['E', 'E', 'E', 'E', 'E']], 
	[3, 0]
): print x

print 

for x in Solution().updateBoard(
	[['B', '1', 'E', '1', 'B'],
	 ['B', '1', 'M', '1', 'B'],
	 ['B', '1', '1', '1', 'B'],
	 ['B', 'B', 'B', 'B', 'B']], 
	[1,2]
): print x