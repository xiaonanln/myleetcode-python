from collections import deque
class Solution(object):
	def longestValidParentheses(self, s):
		"""
		:type s: str
		:rtype: int
		"""
		L = len(s)
		dp = [[0] * (L+1) for _ in xrange(L+1)]
		maxlen = 0
		
		for i in xrange(L):
			dp[i][i] = 1
		
		for l in xrange(2, L+1, 2):
			for i in xrange(0, L-l+1):
				j = i + l
				if s[i] == ')' or s[j-1] == '(': continue 
				if s[i] == '(' and s[j-1] == ')' and dp[i+1][j-1]:
					dp[i][j] = 1
					maxlen = l
				else:
					for k in xrange(i+2, j-2+1, 2):
						if dp[i][k] and dp[k][j]:
							dp[i][j] = 1
							maxlen = l
							break 
		return maxlen

class Solution(object):
	def longestValidParentheses(self, s):
		def rev(s):
			return ''.join('(' if c == ')' else ')' for c in s)[::-1]

		return max(self._longestValidParentheses(s), self._longestValidParentheses(rev(s)))

	def _longestValidParentheses(self, s):
		maxlen = 0
		depth = 0
		length = 0
		for c in s:
			if c == '(':
				depth += 1
				length += 1
			elif c == ')':
				depth -= 1
				length += 1
				if depth == 0:
					maxlen = max(maxlen, length)
				elif depth < 0:
					depth = 0
					length = 0

		return maxlen

testCases = ["", 
"(()", 
"()", 
")()())", 
")(((((()())()()))()(()))(", 
"((())())(()))(()()(()(()))(()((((()))))))((()())()))()()(()(((((()()()())))()())(()()))((((((())))((()))()()))))(()))())))()))()())((()()))))(()(((((())))))()((()(()(())((((())(())((()()(()())))())(()(())()()))())(()()()))()(((()())(((()()())))(((()()()))(()()))()))()))))))())()()((()(())(()))()((()()()((())))()(((()())(()))())())))(((()))))())))()(())))()())))())()((()))((()))()))(((())((()()()(()((()((())))((()()))())(()()(()))))())((())))(()))()))))))()(()))())(()())))))(()))((())(()((())(((((()()()(()()())))(()())()((()(()()))(()(())((()((()))))))))(()(())()())()(()(()(()))()()()(()()())))(())(()((((()()))())))(())((()(())())))))())()()))(((())))())((()(()))(()()))((())(())))))(()(()((()((()()))))))(()()()(()()()(()(())()))()))(((()(())()())(()))())))(((()))())(()((()))(()((()()()(())()(()())()(())(()(()((((())()))(((()()(((()())(()()()(())()())())(()(()()((()))))()(()))))(((())))()()))(()))((()))))()()))))((((()(())()()()((()))((()))())())(()((()()())))))))()))(((()))))))(()())))(((()))((()))())))(((()(((())))())(()))))(((()(((((((((((((())(((()))((((())())()))())((((())(((())))())(((()))))()())()(())())(()))))()))()()()))(((((())()()((()))())(()))()()(()()))(())(()()))()))))(((())))))((()()(()()()()((())((((())())))))((((((()((()((())())(()((()))(()())())())(()(())(())(()((())((())))(())())))(()()())((((()))))((()(())(()(()())))))))))((()())()()))((()(((()((()))(((((()()()()()(()(()((()(()))(()(()((()()))))()(()()((((((()((()())()))((())()()(((((()(()))))()()((()())((()())()(())((()))()()(()))", 
]
for s in testCases:
	print s, len(s), Solution().longestValidParentheses(s),Solution2().longestValidParentheses(s)